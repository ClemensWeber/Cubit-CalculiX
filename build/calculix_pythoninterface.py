# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _calculix_pythoninterface
else:
    import _calculix_pythoninterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _calculix_pythoninterface.delete_SwigPyIterator

    def value(self):
        return _calculix_pythoninterface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _calculix_pythoninterface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _calculix_pythoninterface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _calculix_pythoninterface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _calculix_pythoninterface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _calculix_pythoninterface.SwigPyIterator_copy(self)

    def next(self):
        return _calculix_pythoninterface.SwigPyIterator_next(self)

    def __next__(self):
        return _calculix_pythoninterface.SwigPyIterator___next__(self)

    def previous(self):
        return _calculix_pythoninterface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _calculix_pythoninterface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _calculix_pythoninterface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _calculix_pythoninterface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _calculix_pythoninterface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _calculix_pythoninterface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _calculix_pythoninterface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _calculix_pythoninterface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _calculix_pythoninterface:
_calculix_pythoninterface.SwigPyIterator_swigregister(SwigPyIterator)

class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _calculix_pythoninterface.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _calculix_pythoninterface.vectori___nonzero__(self)

    def __bool__(self):
        return _calculix_pythoninterface.vectori___bool__(self)

    def __len__(self):
        return _calculix_pythoninterface.vectori___len__(self)

    def __getslice__(self, i, j):
        return _calculix_pythoninterface.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _calculix_pythoninterface.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _calculix_pythoninterface.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _calculix_pythoninterface.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _calculix_pythoninterface.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _calculix_pythoninterface.vectori___setitem__(self, *args)

    def pop(self):
        return _calculix_pythoninterface.vectori_pop(self)

    def append(self, x):
        return _calculix_pythoninterface.vectori_append(self, x)

    def empty(self):
        return _calculix_pythoninterface.vectori_empty(self)

    def size(self):
        return _calculix_pythoninterface.vectori_size(self)

    def swap(self, v):
        return _calculix_pythoninterface.vectori_swap(self, v)

    def begin(self):
        return _calculix_pythoninterface.vectori_begin(self)

    def end(self):
        return _calculix_pythoninterface.vectori_end(self)

    def rbegin(self):
        return _calculix_pythoninterface.vectori_rbegin(self)

    def rend(self):
        return _calculix_pythoninterface.vectori_rend(self)

    def clear(self):
        return _calculix_pythoninterface.vectori_clear(self)

    def get_allocator(self):
        return _calculix_pythoninterface.vectori_get_allocator(self)

    def pop_back(self):
        return _calculix_pythoninterface.vectori_pop_back(self)

    def erase(self, *args):
        return _calculix_pythoninterface.vectori_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectori_swiginit(self, _calculix_pythoninterface.new_vectori(*args))

    def push_back(self, x):
        return _calculix_pythoninterface.vectori_push_back(self, x)

    def front(self):
        return _calculix_pythoninterface.vectori_front(self)

    def back(self):
        return _calculix_pythoninterface.vectori_back(self)

    def assign(self, n, x):
        return _calculix_pythoninterface.vectori_assign(self, n, x)

    def resize(self, *args):
        return _calculix_pythoninterface.vectori_resize(self, *args)

    def insert(self, *args):
        return _calculix_pythoninterface.vectori_insert(self, *args)

    def reserve(self, n):
        return _calculix_pythoninterface.vectori_reserve(self, n)

    def capacity(self):
        return _calculix_pythoninterface.vectori_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectori

# Register vectori in _calculix_pythoninterface:
_calculix_pythoninterface.vectori_swigregister(vectori)

class vectorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _calculix_pythoninterface.vectorf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _calculix_pythoninterface.vectorf___nonzero__(self)

    def __bool__(self):
        return _calculix_pythoninterface.vectorf___bool__(self)

    def __len__(self):
        return _calculix_pythoninterface.vectorf___len__(self)

    def __getslice__(self, i, j):
        return _calculix_pythoninterface.vectorf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _calculix_pythoninterface.vectorf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _calculix_pythoninterface.vectorf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _calculix_pythoninterface.vectorf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _calculix_pythoninterface.vectorf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _calculix_pythoninterface.vectorf___setitem__(self, *args)

    def pop(self):
        return _calculix_pythoninterface.vectorf_pop(self)

    def append(self, x):
        return _calculix_pythoninterface.vectorf_append(self, x)

    def empty(self):
        return _calculix_pythoninterface.vectorf_empty(self)

    def size(self):
        return _calculix_pythoninterface.vectorf_size(self)

    def swap(self, v):
        return _calculix_pythoninterface.vectorf_swap(self, v)

    def begin(self):
        return _calculix_pythoninterface.vectorf_begin(self)

    def end(self):
        return _calculix_pythoninterface.vectorf_end(self)

    def rbegin(self):
        return _calculix_pythoninterface.vectorf_rbegin(self)

    def rend(self):
        return _calculix_pythoninterface.vectorf_rend(self)

    def clear(self):
        return _calculix_pythoninterface.vectorf_clear(self)

    def get_allocator(self):
        return _calculix_pythoninterface.vectorf_get_allocator(self)

    def pop_back(self):
        return _calculix_pythoninterface.vectorf_pop_back(self)

    def erase(self, *args):
        return _calculix_pythoninterface.vectorf_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectorf_swiginit(self, _calculix_pythoninterface.new_vectorf(*args))

    def push_back(self, x):
        return _calculix_pythoninterface.vectorf_push_back(self, x)

    def front(self):
        return _calculix_pythoninterface.vectorf_front(self)

    def back(self):
        return _calculix_pythoninterface.vectorf_back(self)

    def assign(self, n, x):
        return _calculix_pythoninterface.vectorf_assign(self, n, x)

    def resize(self, *args):
        return _calculix_pythoninterface.vectorf_resize(self, *args)

    def insert(self, *args):
        return _calculix_pythoninterface.vectorf_insert(self, *args)

    def reserve(self, n):
        return _calculix_pythoninterface.vectorf_reserve(self, n)

    def capacity(self):
        return _calculix_pythoninterface.vectorf_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectorf

# Register vectorf in _calculix_pythoninterface:
_calculix_pythoninterface.vectorf_swigregister(vectorf)

class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _calculix_pythoninterface.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _calculix_pythoninterface.vectord___nonzero__(self)

    def __bool__(self):
        return _calculix_pythoninterface.vectord___bool__(self)

    def __len__(self):
        return _calculix_pythoninterface.vectord___len__(self)

    def __getslice__(self, i, j):
        return _calculix_pythoninterface.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _calculix_pythoninterface.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _calculix_pythoninterface.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _calculix_pythoninterface.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _calculix_pythoninterface.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _calculix_pythoninterface.vectord___setitem__(self, *args)

    def pop(self):
        return _calculix_pythoninterface.vectord_pop(self)

    def append(self, x):
        return _calculix_pythoninterface.vectord_append(self, x)

    def empty(self):
        return _calculix_pythoninterface.vectord_empty(self)

    def size(self):
        return _calculix_pythoninterface.vectord_size(self)

    def swap(self, v):
        return _calculix_pythoninterface.vectord_swap(self, v)

    def begin(self):
        return _calculix_pythoninterface.vectord_begin(self)

    def end(self):
        return _calculix_pythoninterface.vectord_end(self)

    def rbegin(self):
        return _calculix_pythoninterface.vectord_rbegin(self)

    def rend(self):
        return _calculix_pythoninterface.vectord_rend(self)

    def clear(self):
        return _calculix_pythoninterface.vectord_clear(self)

    def get_allocator(self):
        return _calculix_pythoninterface.vectord_get_allocator(self)

    def pop_back(self):
        return _calculix_pythoninterface.vectord_pop_back(self)

    def erase(self, *args):
        return _calculix_pythoninterface.vectord_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectord_swiginit(self, _calculix_pythoninterface.new_vectord(*args))

    def push_back(self, x):
        return _calculix_pythoninterface.vectord_push_back(self, x)

    def front(self):
        return _calculix_pythoninterface.vectord_front(self)

    def back(self):
        return _calculix_pythoninterface.vectord_back(self)

    def assign(self, n, x):
        return _calculix_pythoninterface.vectord_assign(self, n, x)

    def resize(self, *args):
        return _calculix_pythoninterface.vectord_resize(self, *args)

    def insert(self, *args):
        return _calculix_pythoninterface.vectord_insert(self, *args)

    def reserve(self, n):
        return _calculix_pythoninterface.vectord_reserve(self, n)

    def capacity(self):
        return _calculix_pythoninterface.vectord_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectord

# Register vectord in _calculix_pythoninterface:
_calculix_pythoninterface.vectord_swigregister(vectord)

class vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _calculix_pythoninterface.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _calculix_pythoninterface.vectors___nonzero__(self)

    def __bool__(self):
        return _calculix_pythoninterface.vectors___bool__(self)

    def __len__(self):
        return _calculix_pythoninterface.vectors___len__(self)

    def __getslice__(self, i, j):
        return _calculix_pythoninterface.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _calculix_pythoninterface.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _calculix_pythoninterface.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _calculix_pythoninterface.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _calculix_pythoninterface.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _calculix_pythoninterface.vectors___setitem__(self, *args)

    def pop(self):
        return _calculix_pythoninterface.vectors_pop(self)

    def append(self, x):
        return _calculix_pythoninterface.vectors_append(self, x)

    def empty(self):
        return _calculix_pythoninterface.vectors_empty(self)

    def size(self):
        return _calculix_pythoninterface.vectors_size(self)

    def swap(self, v):
        return _calculix_pythoninterface.vectors_swap(self, v)

    def begin(self):
        return _calculix_pythoninterface.vectors_begin(self)

    def end(self):
        return _calculix_pythoninterface.vectors_end(self)

    def rbegin(self):
        return _calculix_pythoninterface.vectors_rbegin(self)

    def rend(self):
        return _calculix_pythoninterface.vectors_rend(self)

    def clear(self):
        return _calculix_pythoninterface.vectors_clear(self)

    def get_allocator(self):
        return _calculix_pythoninterface.vectors_get_allocator(self)

    def pop_back(self):
        return _calculix_pythoninterface.vectors_pop_back(self)

    def erase(self, *args):
        return _calculix_pythoninterface.vectors_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectors_swiginit(self, _calculix_pythoninterface.new_vectors(*args))

    def push_back(self, x):
        return _calculix_pythoninterface.vectors_push_back(self, x)

    def front(self):
        return _calculix_pythoninterface.vectors_front(self)

    def back(self):
        return _calculix_pythoninterface.vectors_back(self)

    def assign(self, n, x):
        return _calculix_pythoninterface.vectors_assign(self, n, x)

    def resize(self, *args):
        return _calculix_pythoninterface.vectors_resize(self, *args)

    def insert(self, *args):
        return _calculix_pythoninterface.vectors_insert(self, *args)

    def reserve(self, n):
        return _calculix_pythoninterface.vectors_reserve(self, n)

    def capacity(self):
        return _calculix_pythoninterface.vectors_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectors

# Register vectors in _calculix_pythoninterface:
_calculix_pythoninterface.vectors_swigregister(vectors)

class pairi_i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _calculix_pythoninterface.pairi_i_swiginit(self, _calculix_pythoninterface.new_pairi_i(*args))
    first = property(_calculix_pythoninterface.pairi_i_first_get, _calculix_pythoninterface.pairi_i_first_set)
    second = property(_calculix_pythoninterface.pairi_i_second_get, _calculix_pythoninterface.pairi_i_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _calculix_pythoninterface.delete_pairi_i

# Register pairi_i in _calculix_pythoninterface:
_calculix_pythoninterface.pairi_i_swigregister(pairi_i)

class VectorPairi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _calculix_pythoninterface.VectorPairi_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _calculix_pythoninterface.VectorPairi___nonzero__(self)

    def __bool__(self):
        return _calculix_pythoninterface.VectorPairi___bool__(self)

    def __len__(self):
        return _calculix_pythoninterface.VectorPairi___len__(self)

    def __getslice__(self, i, j):
        return _calculix_pythoninterface.VectorPairi___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _calculix_pythoninterface.VectorPairi___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _calculix_pythoninterface.VectorPairi___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _calculix_pythoninterface.VectorPairi___delitem__(self, *args)

    def __getitem__(self, *args):
        return _calculix_pythoninterface.VectorPairi___getitem__(self, *args)

    def __setitem__(self, *args):
        return _calculix_pythoninterface.VectorPairi___setitem__(self, *args)

    def pop(self):
        return _calculix_pythoninterface.VectorPairi_pop(self)

    def append(self, x):
        return _calculix_pythoninterface.VectorPairi_append(self, x)

    def empty(self):
        return _calculix_pythoninterface.VectorPairi_empty(self)

    def size(self):
        return _calculix_pythoninterface.VectorPairi_size(self)

    def swap(self, v):
        return _calculix_pythoninterface.VectorPairi_swap(self, v)

    def begin(self):
        return _calculix_pythoninterface.VectorPairi_begin(self)

    def end(self):
        return _calculix_pythoninterface.VectorPairi_end(self)

    def rbegin(self):
        return _calculix_pythoninterface.VectorPairi_rbegin(self)

    def rend(self):
        return _calculix_pythoninterface.VectorPairi_rend(self)

    def clear(self):
        return _calculix_pythoninterface.VectorPairi_clear(self)

    def get_allocator(self):
        return _calculix_pythoninterface.VectorPairi_get_allocator(self)

    def pop_back(self):
        return _calculix_pythoninterface.VectorPairi_pop_back(self)

    def erase(self, *args):
        return _calculix_pythoninterface.VectorPairi_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.VectorPairi_swiginit(self, _calculix_pythoninterface.new_VectorPairi(*args))

    def push_back(self, x):
        return _calculix_pythoninterface.VectorPairi_push_back(self, x)

    def front(self):
        return _calculix_pythoninterface.VectorPairi_front(self)

    def back(self):
        return _calculix_pythoninterface.VectorPairi_back(self)

    def assign(self, n, x):
        return _calculix_pythoninterface.VectorPairi_assign(self, n, x)

    def resize(self, *args):
        return _calculix_pythoninterface.VectorPairi_resize(self, *args)

    def insert(self, *args):
        return _calculix_pythoninterface.VectorPairi_insert(self, *args)

    def reserve(self, n):
        return _calculix_pythoninterface.VectorPairi_reserve(self, n)

    def capacity(self):
        return _calculix_pythoninterface.VectorPairi_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_VectorPairi

# Register VectorPairi in _calculix_pythoninterface:
_calculix_pythoninterface.VectorPairi_swigregister(VectorPairi)

class CalculiXPythonInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _calculix_pythoninterface.CalculiXPythonInterface_swiginit(self, _calculix_pythoninterface.new_CalculiXPythonInterface())
    __swig_destroy__ = _calculix_pythoninterface.delete_CalculiXPythonInterface

    def help(self):
        return _calculix_pythoninterface.CalculiXPythonInterface_help(self)

    def frd_get_result_block_types(self, job_id):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_result_block_types(self, job_id)

    def frd_get_result_block_components(self, job_id, result_block_type):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_result_block_components(self, job_id, result_block_type)

    def frd_get_total_increments(self, job_id):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_total_increments(self, job_id)

    def frd_get_time_from_total_increment(self, job_id, total_increment):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_time_from_total_increment(self, job_id, total_increment)

    def frd_get_node_ids_between_values(self, job_id, total_increment, result_block_type, result_block_component, lower_value, upper_value):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_ids_between_values(self, job_id, total_increment, result_block_type, result_block_component, lower_value, upper_value)

    def frd_get_node_ids_smaller_value(self, job_id, total_increment, result_block_type, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_ids_smaller_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_node_ids_greater_value(self, job_id, total_increment, result_block_type, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_ids_greater_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_element_ids_between_values(self, job_id, total_increment, result_block_type, result_block_component, lower_value, upper_value):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_between_values(self, job_id, total_increment, result_block_type, result_block_component, lower_value, upper_value)

    def frd_get_element_ids_smaller_value(self, job_id, total_increment, result_block_type, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_smaller_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_element_ids_greater_value(self, job_id, total_increment, result_block_type, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_greater_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_element_ids_over_limit(self, job_id, total_increment, result_block_type, result_block_component, limit):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_over_limit(self, job_id, total_increment, result_block_type, result_block_component, limit)

    def frd_get_node_value(self, job_id, node_id, total_increment, result_block_type, result_block_component):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_value(self, job_id, node_id, total_increment, result_block_type, result_block_component)

    def frd_get_node_values(self, job_id, node_id, total_increment, result_block_type):
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_values(self, job_id, node_id, total_increment, result_block_type)

    def dat_get_result_block_types(self, job_id):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_types(self, job_id)

    def dat_get_result_block_set(self, job_id):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_set(self, job_id)

    def dat_get_result_block_components(self, job_id, result_block_type):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_components(self, job_id, result_block_type)

    def dat_get_result_block_times(self, job_id, result_block_type, result_block_set):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_times(self, job_id, result_block_type, result_block_set)

    def dat_get_node_ids_between_values(self, job_id, time, result_block_type, result_block_set, result_block_component, lower_value, upper_value):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_ids_between_values(self, job_id, time, result_block_type, result_block_set, result_block_component, lower_value, upper_value)

    def dat_get_node_ids_smaller_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_ids_smaller_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_node_ids_greater_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_ids_greater_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_element_ids_between_values(self, job_id, time, result_block_type, result_block_set, result_block_component, lower_value, upper_value):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_between_values(self, job_id, time, result_block_type, result_block_set, result_block_component, lower_value, upper_value)

    def dat_get_element_ids_smaller_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_smaller_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_element_ids_greater_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_greater_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_element_ids_over_limit(self, job_id, time, result_block_type, result_block_set, result_block_component, limit):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_over_limit(self, job_id, time, result_block_type, result_block_set, result_block_component, limit)

    def dat_get_node_value(self, job_id, node_id, time, result_block_type, result_block_set, result_block_component):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_value(self, job_id, node_id, time, result_block_type, result_block_set, result_block_component)

    def dat_get_node_values(self, job_id, node_id, time, result_block_type, result_block_set):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_values(self, job_id, node_id, time, result_block_type, result_block_set)

    def dat_get_element_values_for_component(self, job_id, node_id, time, result_block_type, result_block_set, result_block_component):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_values_for_component(self, job_id, node_id, time, result_block_type, result_block_set, result_block_component)

    def dat_get_element_values(self, job_id, node_id, time, result_block_type, result_block_set):
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_values(self, job_id, node_id, time, result_block_type, result_block_set)
    ccx_iface = property(_calculix_pythoninterface.CalculiXPythonInterface_ccx_iface_get, _calculix_pythoninterface.CalculiXPythonInterface_ccx_iface_set)

# Register CalculiXPythonInterface in _calculix_pythoninterface:
_calculix_pythoninterface.CalculiXPythonInterface_swigregister(CalculiXPythonInterface)



